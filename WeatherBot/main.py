import asyncio
import requests
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from config import tg_bot_token, open_weather_token


bot = Bot(token=tg_bot_token)
dp = Dispatcher()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–ú–æ—Å–∫–≤–∞"), types.KeyboardButton(text="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")],
        [types.KeyboardButton(text="–ú–∞—è–º–∏"), types.KeyboardButton(text="–Ø–ª—Ç–∞")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–ó–¥—Ä–∞—Å—Ç–≤—É–π! –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É?", reply_markup=keyboard)


@dp.message()
async def get_weather(message: types.Message):
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }

    try:
        r = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
        )
        data = r.json()

        city = data["name"]
        cur_weather = data["main"]["temp"]

        weather_description = data["weather"][0]["main"]
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!"

        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(
            data["sys"]["sunrise"])

        await message.reply(f"üë®‚Äçüíª{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}üë®‚Äçüíª\n"
                            f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(cur_weather)}¬∞\n{wd}\n"
                            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\nüí• –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\nüå¨ –í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
                            f"üåÖ –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\nüåÑ –ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n‚òÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n"
                            )

    except:
        await message.reply("\U00002620 –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ \U00002620")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
